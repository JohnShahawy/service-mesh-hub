// Code generated by MockGen. DO NOT EDIT.
// Source: ./dependencies.go

// Package mock_translator_internal is a generated GoMock package.
package mock_translator_internal

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	input "github.com/solo-io/service-mesh-hub/pkg/api/discovery.smh.solo.io/input"
	mesh "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/mesh"
	meshservice "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/meshservice"
	meshworkload "github.com/solo-io/service-mesh-hub/pkg/mesh-discovery/translation/meshworkload"
)

// MockDependencyFactory is a mock of DependencyFactory interface
type MockDependencyFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyFactoryMockRecorder
}

// MockDependencyFactoryMockRecorder is the mock recorder for MockDependencyFactory
type MockDependencyFactoryMockRecorder struct {
	mock *MockDependencyFactory
}

// NewMockDependencyFactory creates a new mock instance
func NewMockDependencyFactory(ctrl *gomock.Controller) *MockDependencyFactory {
	mock := &MockDependencyFactory{ctrl: ctrl}
	mock.recorder = &MockDependencyFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDependencyFactory) EXPECT() *MockDependencyFactoryMockRecorder {
	return m.recorder
}

// MakeMeshTranslator mocks base method
func (m *MockDependencyFactory) MakeMeshTranslator(ctx context.Context, in input.Snapshot) mesh.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMeshTranslator", ctx, in)
	ret0, _ := ret[0].(mesh.Translator)
	return ret0
}

// MakeMeshTranslator indicates an expected call of MakeMeshTranslator
func (mr *MockDependencyFactoryMockRecorder) MakeMeshTranslator(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMeshTranslator", reflect.TypeOf((*MockDependencyFactory)(nil).MakeMeshTranslator), ctx, in)
}

// MakeMeshWorkloadTranslator mocks base method
func (m *MockDependencyFactory) MakeMeshWorkloadTranslator(ctx context.Context, in input.Snapshot) meshworkload.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMeshWorkloadTranslator", ctx, in)
	ret0, _ := ret[0].(meshworkload.Translator)
	return ret0
}

// MakeMeshWorkloadTranslator indicates an expected call of MakeMeshWorkloadTranslator
func (mr *MockDependencyFactoryMockRecorder) MakeMeshWorkloadTranslator(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMeshWorkloadTranslator", reflect.TypeOf((*MockDependencyFactory)(nil).MakeMeshWorkloadTranslator), ctx, in)
}

// MakeMeshServiceTranslator mocks base method
func (m *MockDependencyFactory) MakeMeshServiceTranslator(ctx context.Context) meshservice.Translator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeMeshServiceTranslator", ctx)
	ret0, _ := ret[0].(meshservice.Translator)
	return ret0
}

// MakeMeshServiceTranslator indicates an expected call of MakeMeshServiceTranslator
func (mr *MockDependencyFactoryMockRecorder) MakeMeshServiceTranslator(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeMeshServiceTranslator", reflect.TypeOf((*MockDependencyFactory)(nil).MakeMeshServiceTranslator), ctx)
}
