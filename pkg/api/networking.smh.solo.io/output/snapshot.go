// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./snapshot.go -destination mocks/snapshot.go

// Definitions for Output Snapshots
package output

import (
	"context"
	"encoding/json"
	"sort"

	"github.com/solo-io/go-utils/contextutils"

	"github.com/rotisserie/eris"
	"github.com/solo-io/skv2/contrib/pkg/output"
	"github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	"sigs.k8s.io/controller-runtime/pkg/client"

	certificates_smh_solo_io_v1alpha2 "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2"
	certificates_smh_solo_io_v1alpha2_sets "github.com/solo-io/service-mesh-hub/pkg/api/certificates.smh.solo.io/v1alpha2/sets"

	networking_istio_io_v1alpha3_sets "github.com/solo-io/external-apis/pkg/api/istio/networking.istio.io/v1alpha3/sets"
	networking_istio_io_v1alpha3 "istio.io/client-go/pkg/apis/networking/v1alpha3"

	security_istio_io_v1beta1_sets "github.com/solo-io/external-apis/pkg/api/istio/security.istio.io/v1beta1/sets"
	security_istio_io_v1beta1 "istio.io/client-go/pkg/apis/security/v1beta1"

	v1_sets "github.com/solo-io/external-apis/pkg/api/k8s/core/v1/sets"
	v1 "k8s.io/api/core/v1"

	split_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/split/v1alpha3"
	split_smi_spec_io_v1alpha3_sets "github.com/solo-io/external-apis/pkg/api/smi/split.smi-spec.io/v1alpha3/sets"

	access_smi_spec_io_v1alpha2 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/access/v1alpha2"
	access_smi_spec_io_v1alpha2_sets "github.com/solo-io/external-apis/pkg/api/smi/access.smi-spec.io/v1alpha2/sets"

	specs_smi_spec_io_v1alpha3 "github.com/servicemeshinterface/smi-sdk-go/pkg/apis/specs/v1alpha3"
	specs_smi_spec_io_v1alpha3_sets "github.com/solo-io/external-apis/pkg/api/smi/specs.smi-spec.io/v1alpha3/sets"
)

// this error can occur if constructing a Partitioned Snapshot from a resource
// that is missing the partition label
var MissingRequiredLabelError = func(labelKey, resourceKind string, obj ezkube.ResourceId) error {
	return eris.Errorf("expected label %v not on labels of %v %v", labelKey, resourceKind, sets.Key(obj))
}

// the snapshot of output resources produced by a translation
type Snapshot interface {

	// return the set of IssuedCertificates with a given set of labels
	IssuedCertificates() []LabeledIssuedCertificateSet
	// return the set of DestinationRules with a given set of labels
	DestinationRules() []LabeledDestinationRuleSet
	// return the set of EnvoyFilters with a given set of labels
	EnvoyFilters() []LabeledEnvoyFilterSet
	// return the set of Gateways with a given set of labels
	Gateways() []LabeledGatewaySet
	// return the set of ServiceEntries with a given set of labels
	ServiceEntries() []LabeledServiceEntrySet
	// return the set of VirtualServices with a given set of labels
	VirtualServices() []LabeledVirtualServiceSet
	// return the set of AuthorizationPolicies with a given set of labels
	AuthorizationPolicies() []LabeledAuthorizationPolicySet
	// return the set of Secrets with a given set of labels
	Secrets() []LabeledSecretSet
	// return the set of TrafficSplits with a given set of labels
	TrafficSplits() []LabeledTrafficSplitSet
	// return the set of TrafficTargets with a given set of labels
	TrafficTargets() []LabeledTrafficTargetSet
	// return the set of HTTPRouteGroups with a given set of labels
	HTTPRouteGroups() []LabeledHTTPRouteGroupSet

	// apply the snapshot to the local cluster, garbage collecting stale resources
	ApplyLocalCluster(ctx context.Context, clusterClient client.Client, errHandler output.ErrorHandler)

	// apply resources from the snapshot across multiple clusters, garbage collecting stale resources
	ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler)

	// serialize the entire snapshot as JSON
	MarshalJSON() ([]byte, error)
}

type snapshot struct {
	name string

	issuedCertificates    []LabeledIssuedCertificateSet
	destinationRules      []LabeledDestinationRuleSet
	envoyFilters          []LabeledEnvoyFilterSet
	gateways              []LabeledGatewaySet
	serviceEntries        []LabeledServiceEntrySet
	virtualServices       []LabeledVirtualServiceSet
	authorizationPolicies []LabeledAuthorizationPolicySet
	secrets               []LabeledSecretSet
	trafficSplits         []LabeledTrafficSplitSet
	trafficTargets        []LabeledTrafficTargetSet
	hTTPRouteGroups       []LabeledHTTPRouteGroupSet
}

func NewSnapshot(
	name string,

	issuedCertificates []LabeledIssuedCertificateSet,
	destinationRules []LabeledDestinationRuleSet,
	envoyFilters []LabeledEnvoyFilterSet,
	gateways []LabeledGatewaySet,
	serviceEntries []LabeledServiceEntrySet,
	virtualServices []LabeledVirtualServiceSet,
	authorizationPolicies []LabeledAuthorizationPolicySet,
	secrets []LabeledSecretSet,
	trafficSplits []LabeledTrafficSplitSet,
	trafficTargets []LabeledTrafficTargetSet,
	hTTPRouteGroups []LabeledHTTPRouteGroupSet,

) Snapshot {
	return &snapshot{
		name: name,

		issuedCertificates:    issuedCertificates,
		destinationRules:      destinationRules,
		envoyFilters:          envoyFilters,
		gateways:              gateways,
		serviceEntries:        serviceEntries,
		virtualServices:       virtualServices,
		authorizationPolicies: authorizationPolicies,
		secrets:               secrets,
		trafficSplits:         trafficSplits,
		trafficTargets:        trafficTargets,
		hTTPRouteGroups:       hTTPRouteGroups,
	}
}

// automatically partitions the input resources
// by the presence of the provided label.
func NewLabelPartitionedSnapshot(
	name,
	labelKey string, // the key by which to partition the resources

	issuedCertificates certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet,

	destinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet,
	envoyFilters networking_istio_io_v1alpha3_sets.EnvoyFilterSet,
	gateways networking_istio_io_v1alpha3_sets.GatewaySet,
	serviceEntries networking_istio_io_v1alpha3_sets.ServiceEntrySet,
	virtualServices networking_istio_io_v1alpha3_sets.VirtualServiceSet,

	authorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet,

	secrets v1_sets.SecretSet,

	trafficSplits split_smi_spec_io_v1alpha3_sets.TrafficSplitSet,

	trafficTargets access_smi_spec_io_v1alpha2_sets.TrafficTargetSet,

	hTTPRouteGroups specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet,

) (Snapshot, error) {

	partitionedIssuedCertificates, err := partitionIssuedCertificatesByLabel(labelKey, issuedCertificates)
	if err != nil {
		return nil, err
	}
	partitionedDestinationRules, err := partitionDestinationRulesByLabel(labelKey, destinationRules)
	if err != nil {
		return nil, err
	}
	partitionedEnvoyFilters, err := partitionEnvoyFiltersByLabel(labelKey, envoyFilters)
	if err != nil {
		return nil, err
	}
	partitionedGateways, err := partitionGatewaysByLabel(labelKey, gateways)
	if err != nil {
		return nil, err
	}
	partitionedServiceEntries, err := partitionServiceEntriesByLabel(labelKey, serviceEntries)
	if err != nil {
		return nil, err
	}
	partitionedVirtualServices, err := partitionVirtualServicesByLabel(labelKey, virtualServices)
	if err != nil {
		return nil, err
	}
	partitionedAuthorizationPolicies, err := partitionAuthorizationPoliciesByLabel(labelKey, authorizationPolicies)
	if err != nil {
		return nil, err
	}
	partitionedSecrets, err := partitionSecretsByLabel(labelKey, secrets)
	if err != nil {
		return nil, err
	}
	partitionedTrafficSplits, err := partitionTrafficSplitsByLabel(labelKey, trafficSplits)
	if err != nil {
		return nil, err
	}
	partitionedTrafficTargets, err := partitionTrafficTargetsByLabel(labelKey, trafficTargets)
	if err != nil {
		return nil, err
	}
	partitionedHTTPRouteGroups, err := partitionHTTPRouteGroupsByLabel(labelKey, hTTPRouteGroups)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		partitionedIssuedCertificates,
		partitionedDestinationRules,
		partitionedEnvoyFilters,
		partitionedGateways,
		partitionedServiceEntries,
		partitionedVirtualServices,
		partitionedAuthorizationPolicies,
		partitionedSecrets,
		partitionedTrafficSplits,
		partitionedTrafficTargets,
		partitionedHTTPRouteGroups,
	), nil
}

// simplified constructor for a snapshot
// with a single label partition (i.e. all resources share a single set of labels).
func NewSinglePartitionedSnapshot(
	name string,
	snapshotLabels map[string]string, // a single set of labels shared by all resources

	issuedCertificates certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet,

	destinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet,
	envoyFilters networking_istio_io_v1alpha3_sets.EnvoyFilterSet,
	gateways networking_istio_io_v1alpha3_sets.GatewaySet,
	serviceEntries networking_istio_io_v1alpha3_sets.ServiceEntrySet,
	virtualServices networking_istio_io_v1alpha3_sets.VirtualServiceSet,

	authorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet,

	secrets v1_sets.SecretSet,

	trafficSplits split_smi_spec_io_v1alpha3_sets.TrafficSplitSet,

	trafficTargets access_smi_spec_io_v1alpha2_sets.TrafficTargetSet,

	hTTPRouteGroups specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet,

) (Snapshot, error) {

	labeledIssuedCertificates, err := NewLabeledIssuedCertificateSet(issuedCertificates, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledDestinationRules, err := NewLabeledDestinationRuleSet(destinationRules, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledEnvoyFilters, err := NewLabeledEnvoyFilterSet(envoyFilters, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledGateways, err := NewLabeledGatewaySet(gateways, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledServiceEntries, err := NewLabeledServiceEntrySet(serviceEntries, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledVirtualServices, err := NewLabeledVirtualServiceSet(virtualServices, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledAuthorizationPolicies, err := NewLabeledAuthorizationPolicySet(authorizationPolicies, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledSecrets, err := NewLabeledSecretSet(secrets, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledTrafficSplits, err := NewLabeledTrafficSplitSet(trafficSplits, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledTrafficTargets, err := NewLabeledTrafficTargetSet(trafficTargets, snapshotLabels)
	if err != nil {
		return nil, err
	}
	labeledHTTPRouteGroups, err := NewLabeledHTTPRouteGroupSet(hTTPRouteGroups, snapshotLabels)
	if err != nil {
		return nil, err
	}

	return NewSnapshot(
		name,

		[]LabeledIssuedCertificateSet{labeledIssuedCertificates},
		[]LabeledDestinationRuleSet{labeledDestinationRules},
		[]LabeledEnvoyFilterSet{labeledEnvoyFilters},
		[]LabeledGatewaySet{labeledGateways},
		[]LabeledServiceEntrySet{labeledServiceEntries},
		[]LabeledVirtualServiceSet{labeledVirtualServices},
		[]LabeledAuthorizationPolicySet{labeledAuthorizationPolicies},
		[]LabeledSecretSet{labeledSecrets},
		[]LabeledTrafficSplitSet{labeledTrafficSplits},
		[]LabeledTrafficTargetSet{labeledTrafficTargets},
		[]LabeledHTTPRouteGroupSet{labeledHTTPRouteGroups},
	), nil
}

// apply the desired resources to the cluster state; remove stale resources where necessary
func (s *snapshot) ApplyLocalCluster(ctx context.Context, cli client.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.issuedCertificates {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.destinationRules {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.envoyFilters {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.gateways {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.serviceEntries {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.virtualServices {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.authorizationPolicies {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.trafficSplits {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.trafficTargets {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.hTTPRouteGroups {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		ListsToSync: genericLists,
	}.SyncLocalCluster(ctx, cli, errHandler)
}

// apply the desired resources to multiple cluster states; remove stale resources where necessary
func (s *snapshot) ApplyMultiCluster(ctx context.Context, multiClusterClient multicluster.Client, errHandler output.ErrorHandler) {
	var genericLists []output.ResourceList

	for _, outputSet := range s.issuedCertificates {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.destinationRules {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.envoyFilters {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.gateways {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.serviceEntries {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.virtualServices {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.authorizationPolicies {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.secrets {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.trafficSplits {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.trafficTargets {
		genericLists = append(genericLists, outputSet.Generic())
	}
	for _, outputSet := range s.hTTPRouteGroups {
		genericLists = append(genericLists, outputSet.Generic())
	}

	output.Snapshot{
		Name:        s.name,
		ListsToSync: genericLists,
	}.SyncMultiCluster(ctx, multiClusterClient, errHandler)
}

func partitionIssuedCertificatesByLabel(labelKey string, set certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet) ([]LabeledIssuedCertificateSet, error) {
	setsByLabel := map[string]certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "IssuedCertificate", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "IssuedCertificate", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = certificates_smh_solo_io_v1alpha2_sets.NewIssuedCertificateSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedIssuedCertificates []LabeledIssuedCertificateSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledIssuedCertificateSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedIssuedCertificates = append(partitionedIssuedCertificates, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedIssuedCertificates, func(i, j int) bool {
		leftLabelValue := partitionedIssuedCertificates[i].Labels()[labelKey]
		rightLabelValue := partitionedIssuedCertificates[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedIssuedCertificates, nil
}

func partitionDestinationRulesByLabel(labelKey string, set networking_istio_io_v1alpha3_sets.DestinationRuleSet) ([]LabeledDestinationRuleSet, error) {
	setsByLabel := map[string]networking_istio_io_v1alpha3_sets.DestinationRuleSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "DestinationRule", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "DestinationRule", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = networking_istio_io_v1alpha3_sets.NewDestinationRuleSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedDestinationRules []LabeledDestinationRuleSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledDestinationRuleSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedDestinationRules = append(partitionedDestinationRules, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedDestinationRules, func(i, j int) bool {
		leftLabelValue := partitionedDestinationRules[i].Labels()[labelKey]
		rightLabelValue := partitionedDestinationRules[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedDestinationRules, nil
}

func partitionEnvoyFiltersByLabel(labelKey string, set networking_istio_io_v1alpha3_sets.EnvoyFilterSet) ([]LabeledEnvoyFilterSet, error) {
	setsByLabel := map[string]networking_istio_io_v1alpha3_sets.EnvoyFilterSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "EnvoyFilter", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "EnvoyFilter", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = networking_istio_io_v1alpha3_sets.NewEnvoyFilterSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedEnvoyFilters []LabeledEnvoyFilterSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledEnvoyFilterSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedEnvoyFilters = append(partitionedEnvoyFilters, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedEnvoyFilters, func(i, j int) bool {
		leftLabelValue := partitionedEnvoyFilters[i].Labels()[labelKey]
		rightLabelValue := partitionedEnvoyFilters[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedEnvoyFilters, nil
}

func partitionGatewaysByLabel(labelKey string, set networking_istio_io_v1alpha3_sets.GatewaySet) ([]LabeledGatewaySet, error) {
	setsByLabel := map[string]networking_istio_io_v1alpha3_sets.GatewaySet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "Gateway", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "Gateway", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = networking_istio_io_v1alpha3_sets.NewGatewaySet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedGateways []LabeledGatewaySet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledGatewaySet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedGateways = append(partitionedGateways, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedGateways, func(i, j int) bool {
		leftLabelValue := partitionedGateways[i].Labels()[labelKey]
		rightLabelValue := partitionedGateways[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedGateways, nil
}

func partitionServiceEntriesByLabel(labelKey string, set networking_istio_io_v1alpha3_sets.ServiceEntrySet) ([]LabeledServiceEntrySet, error) {
	setsByLabel := map[string]networking_istio_io_v1alpha3_sets.ServiceEntrySet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "ServiceEntry", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "ServiceEntry", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = networking_istio_io_v1alpha3_sets.NewServiceEntrySet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedServiceEntries []LabeledServiceEntrySet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledServiceEntrySet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedServiceEntries = append(partitionedServiceEntries, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedServiceEntries, func(i, j int) bool {
		leftLabelValue := partitionedServiceEntries[i].Labels()[labelKey]
		rightLabelValue := partitionedServiceEntries[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedServiceEntries, nil
}

func partitionVirtualServicesByLabel(labelKey string, set networking_istio_io_v1alpha3_sets.VirtualServiceSet) ([]LabeledVirtualServiceSet, error) {
	setsByLabel := map[string]networking_istio_io_v1alpha3_sets.VirtualServiceSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "VirtualService", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "VirtualService", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = networking_istio_io_v1alpha3_sets.NewVirtualServiceSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedVirtualServices []LabeledVirtualServiceSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledVirtualServiceSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedVirtualServices = append(partitionedVirtualServices, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedVirtualServices, func(i, j int) bool {
		leftLabelValue := partitionedVirtualServices[i].Labels()[labelKey]
		rightLabelValue := partitionedVirtualServices[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedVirtualServices, nil
}

func partitionAuthorizationPoliciesByLabel(labelKey string, set security_istio_io_v1beta1_sets.AuthorizationPolicySet) ([]LabeledAuthorizationPolicySet, error) {
	setsByLabel := map[string]security_istio_io_v1beta1_sets.AuthorizationPolicySet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "AuthorizationPolicy", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "AuthorizationPolicy", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = security_istio_io_v1beta1_sets.NewAuthorizationPolicySet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedAuthorizationPolicies []LabeledAuthorizationPolicySet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledAuthorizationPolicySet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedAuthorizationPolicies = append(partitionedAuthorizationPolicies, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedAuthorizationPolicies, func(i, j int) bool {
		leftLabelValue := partitionedAuthorizationPolicies[i].Labels()[labelKey]
		rightLabelValue := partitionedAuthorizationPolicies[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedAuthorizationPolicies, nil
}

func partitionSecretsByLabel(labelKey string, set v1_sets.SecretSet) ([]LabeledSecretSet, error) {
	setsByLabel := map[string]v1_sets.SecretSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "Secret", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "Secret", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = v1_sets.NewSecretSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedSecrets []LabeledSecretSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledSecretSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedSecrets = append(partitionedSecrets, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedSecrets, func(i, j int) bool {
		leftLabelValue := partitionedSecrets[i].Labels()[labelKey]
		rightLabelValue := partitionedSecrets[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedSecrets, nil
}

func partitionTrafficSplitsByLabel(labelKey string, set split_smi_spec_io_v1alpha3_sets.TrafficSplitSet) ([]LabeledTrafficSplitSet, error) {
	setsByLabel := map[string]split_smi_spec_io_v1alpha3_sets.TrafficSplitSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "TrafficSplit", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "TrafficSplit", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = split_smi_spec_io_v1alpha3_sets.NewTrafficSplitSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedTrafficSplits []LabeledTrafficSplitSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledTrafficSplitSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedTrafficSplits = append(partitionedTrafficSplits, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedTrafficSplits, func(i, j int) bool {
		leftLabelValue := partitionedTrafficSplits[i].Labels()[labelKey]
		rightLabelValue := partitionedTrafficSplits[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedTrafficSplits, nil
}

func partitionTrafficTargetsByLabel(labelKey string, set access_smi_spec_io_v1alpha2_sets.TrafficTargetSet) ([]LabeledTrafficTargetSet, error) {
	setsByLabel := map[string]access_smi_spec_io_v1alpha2_sets.TrafficTargetSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "TrafficTarget", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "TrafficTarget", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = access_smi_spec_io_v1alpha2_sets.NewTrafficTargetSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedTrafficTargets []LabeledTrafficTargetSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledTrafficTargetSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedTrafficTargets = append(partitionedTrafficTargets, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedTrafficTargets, func(i, j int) bool {
		leftLabelValue := partitionedTrafficTargets[i].Labels()[labelKey]
		rightLabelValue := partitionedTrafficTargets[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedTrafficTargets, nil
}

func partitionHTTPRouteGroupsByLabel(labelKey string, set specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet) ([]LabeledHTTPRouteGroupSet, error) {
	setsByLabel := map[string]specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet{}

	for _, obj := range set.List() {
		if obj.Labels == nil {
			return nil, MissingRequiredLabelError(labelKey, "HTTPRouteGroup", obj)
		}
		labelValue := obj.Labels[labelKey]
		if labelValue == "" {
			return nil, MissingRequiredLabelError(labelKey, "HTTPRouteGroup", obj)
		}

		setForValue, ok := setsByLabel[labelValue]
		if !ok {
			setForValue = specs_smi_spec_io_v1alpha3_sets.NewHTTPRouteGroupSet()
			setsByLabel[labelValue] = setForValue
		}
		setForValue.Insert(obj)
	}

	// partition by label key
	var partitionedHTTPRouteGroups []LabeledHTTPRouteGroupSet

	for labelValue, setForValue := range setsByLabel {
		labels := map[string]string{labelKey: labelValue}

		partitionedSet, err := NewLabeledHTTPRouteGroupSet(setForValue, labels)
		if err != nil {
			return nil, err
		}

		partitionedHTTPRouteGroups = append(partitionedHTTPRouteGroups, partitionedSet)
	}

	// sort for idempotency
	sort.SliceStable(partitionedHTTPRouteGroups, func(i, j int) bool {
		leftLabelValue := partitionedHTTPRouteGroups[i].Labels()[labelKey]
		rightLabelValue := partitionedHTTPRouteGroups[j].Labels()[labelKey]
		return leftLabelValue < rightLabelValue
	})

	return partitionedHTTPRouteGroups, nil
}

func (s snapshot) IssuedCertificates() []LabeledIssuedCertificateSet {
	return s.issuedCertificates
}

func (s snapshot) DestinationRules() []LabeledDestinationRuleSet {
	return s.destinationRules
}

func (s snapshot) EnvoyFilters() []LabeledEnvoyFilterSet {
	return s.envoyFilters
}

func (s snapshot) Gateways() []LabeledGatewaySet {
	return s.gateways
}

func (s snapshot) ServiceEntries() []LabeledServiceEntrySet {
	return s.serviceEntries
}

func (s snapshot) VirtualServices() []LabeledVirtualServiceSet {
	return s.virtualServices
}

func (s snapshot) AuthorizationPolicies() []LabeledAuthorizationPolicySet {
	return s.authorizationPolicies
}

func (s snapshot) Secrets() []LabeledSecretSet {
	return s.secrets
}

func (s snapshot) TrafficSplits() []LabeledTrafficSplitSet {
	return s.trafficSplits
}

func (s snapshot) TrafficTargets() []LabeledTrafficTargetSet {
	return s.trafficTargets
}

func (s snapshot) HTTPRouteGroups() []LabeledHTTPRouteGroupSet {
	return s.hTTPRouteGroups
}

func (s snapshot) MarshalJSON() ([]byte, error) {
	snapshotMap := map[string]interface{}{"name": s.name}

	issuedCertificateSet := certificates_smh_solo_io_v1alpha2_sets.NewIssuedCertificateSet()
	for _, set := range s.issuedCertificates {
		issuedCertificateSet = issuedCertificateSet.Union(set.Set())
	}
	snapshotMap["issuedCertificates"] = issuedCertificateSet.List()

	destinationRuleSet := networking_istio_io_v1alpha3_sets.NewDestinationRuleSet()
	for _, set := range s.destinationRules {
		destinationRuleSet = destinationRuleSet.Union(set.Set())
	}
	snapshotMap["destinationRules"] = destinationRuleSet.List()
	envoyFilterSet := networking_istio_io_v1alpha3_sets.NewEnvoyFilterSet()
	for _, set := range s.envoyFilters {
		envoyFilterSet = envoyFilterSet.Union(set.Set())
	}
	snapshotMap["envoyFilters"] = envoyFilterSet.List()
	gatewaySet := networking_istio_io_v1alpha3_sets.NewGatewaySet()
	for _, set := range s.gateways {
		gatewaySet = gatewaySet.Union(set.Set())
	}
	snapshotMap["gateways"] = gatewaySet.List()
	serviceEntrySet := networking_istio_io_v1alpha3_sets.NewServiceEntrySet()
	for _, set := range s.serviceEntries {
		serviceEntrySet = serviceEntrySet.Union(set.Set())
	}
	snapshotMap["serviceEntries"] = serviceEntrySet.List()
	virtualServiceSet := networking_istio_io_v1alpha3_sets.NewVirtualServiceSet()
	for _, set := range s.virtualServices {
		virtualServiceSet = virtualServiceSet.Union(set.Set())
	}
	snapshotMap["virtualServices"] = virtualServiceSet.List()

	authorizationPolicySet := security_istio_io_v1beta1_sets.NewAuthorizationPolicySet()
	for _, set := range s.authorizationPolicies {
		authorizationPolicySet = authorizationPolicySet.Union(set.Set())
	}
	snapshotMap["authorizationPolicies"] = authorizationPolicySet.List()

	secretSet := v1_sets.NewSecretSet()
	for _, set := range s.secrets {
		secretSet = secretSet.Union(set.Set())
	}
	snapshotMap["secrets"] = secretSet.List()

	trafficSplitSet := split_smi_spec_io_v1alpha3_sets.NewTrafficSplitSet()
	for _, set := range s.trafficSplits {
		trafficSplitSet = trafficSplitSet.Union(set.Set())
	}
	snapshotMap["trafficSplits"] = trafficSplitSet.List()

	trafficTargetSet := access_smi_spec_io_v1alpha2_sets.NewTrafficTargetSet()
	for _, set := range s.trafficTargets {
		trafficTargetSet = trafficTargetSet.Union(set.Set())
	}
	snapshotMap["trafficTargets"] = trafficTargetSet.List()

	hTTPRouteGroupSet := specs_smi_spec_io_v1alpha3_sets.NewHTTPRouteGroupSet()
	for _, set := range s.hTTPRouteGroups {
		hTTPRouteGroupSet = hTTPRouteGroupSet.Union(set.Set())
	}
	snapshotMap["hTTPRouteGroups"] = hTTPRouteGroupSet.List()

	return json.Marshal(snapshotMap)
}

// LabeledIssuedCertificateSet represents a set of issuedCertificates
// which share a common set of labels.
// These labels are used to find diffs between IssuedCertificateSets.
type LabeledIssuedCertificateSet interface {
	// returns the set of Labels shared by this IssuedCertificateSet
	Labels() map[string]string

	// returns the set of IssuedCertificatees with the given labels
	Set() certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledIssuedCertificateSet struct {
	set    certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet
	labels map[string]string
}

func NewLabeledIssuedCertificateSet(set certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet, labels map[string]string) (LabeledIssuedCertificateSet, error) {
	// validate that each IssuedCertificate contains the labels, else this is not a valid LabeledIssuedCertificateSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on IssuedCertificate %v", k, v, item.Name)
			}
		}
	}

	return &labeledIssuedCertificateSet{set: set, labels: labels}, nil
}

func (l *labeledIssuedCertificateSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledIssuedCertificateSet) Set() certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet {
	return l.set
}

func (l labeledIssuedCertificateSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list certificates_smh_solo_io_v1alpha2.IssuedCertificateList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "IssuedCertificate",
	}
}

// LabeledDestinationRuleSet represents a set of destinationRules
// which share a common set of labels.
// These labels are used to find diffs between DestinationRuleSets.
type LabeledDestinationRuleSet interface {
	// returns the set of Labels shared by this DestinationRuleSet
	Labels() map[string]string

	// returns the set of DestinationRulees with the given labels
	Set() networking_istio_io_v1alpha3_sets.DestinationRuleSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledDestinationRuleSet struct {
	set    networking_istio_io_v1alpha3_sets.DestinationRuleSet
	labels map[string]string
}

func NewLabeledDestinationRuleSet(set networking_istio_io_v1alpha3_sets.DestinationRuleSet, labels map[string]string) (LabeledDestinationRuleSet, error) {
	// validate that each DestinationRule contains the labels, else this is not a valid LabeledDestinationRuleSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on DestinationRule %v", k, v, item.Name)
			}
		}
	}

	return &labeledDestinationRuleSet{set: set, labels: labels}, nil
}

func (l *labeledDestinationRuleSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledDestinationRuleSet) Set() networking_istio_io_v1alpha3_sets.DestinationRuleSet {
	return l.set
}

func (l labeledDestinationRuleSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list networking_istio_io_v1alpha3.DestinationRuleList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "DestinationRule",
	}
}

// LabeledEnvoyFilterSet represents a set of envoyFilters
// which share a common set of labels.
// These labels are used to find diffs between EnvoyFilterSets.
type LabeledEnvoyFilterSet interface {
	// returns the set of Labels shared by this EnvoyFilterSet
	Labels() map[string]string

	// returns the set of EnvoyFilteres with the given labels
	Set() networking_istio_io_v1alpha3_sets.EnvoyFilterSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledEnvoyFilterSet struct {
	set    networking_istio_io_v1alpha3_sets.EnvoyFilterSet
	labels map[string]string
}

func NewLabeledEnvoyFilterSet(set networking_istio_io_v1alpha3_sets.EnvoyFilterSet, labels map[string]string) (LabeledEnvoyFilterSet, error) {
	// validate that each EnvoyFilter contains the labels, else this is not a valid LabeledEnvoyFilterSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on EnvoyFilter %v", k, v, item.Name)
			}
		}
	}

	return &labeledEnvoyFilterSet{set: set, labels: labels}, nil
}

func (l *labeledEnvoyFilterSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledEnvoyFilterSet) Set() networking_istio_io_v1alpha3_sets.EnvoyFilterSet {
	return l.set
}

func (l labeledEnvoyFilterSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list networking_istio_io_v1alpha3.EnvoyFilterList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "EnvoyFilter",
	}
}

// LabeledGatewaySet represents a set of gateways
// which share a common set of labels.
// These labels are used to find diffs between GatewaySets.
type LabeledGatewaySet interface {
	// returns the set of Labels shared by this GatewaySet
	Labels() map[string]string

	// returns the set of Gatewayes with the given labels
	Set() networking_istio_io_v1alpha3_sets.GatewaySet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledGatewaySet struct {
	set    networking_istio_io_v1alpha3_sets.GatewaySet
	labels map[string]string
}

func NewLabeledGatewaySet(set networking_istio_io_v1alpha3_sets.GatewaySet, labels map[string]string) (LabeledGatewaySet, error) {
	// validate that each Gateway contains the labels, else this is not a valid LabeledGatewaySet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on Gateway %v", k, v, item.Name)
			}
		}
	}

	return &labeledGatewaySet{set: set, labels: labels}, nil
}

func (l *labeledGatewaySet) Labels() map[string]string {
	return l.labels
}

func (l *labeledGatewaySet) Set() networking_istio_io_v1alpha3_sets.GatewaySet {
	return l.set
}

func (l labeledGatewaySet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list networking_istio_io_v1alpha3.GatewayList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "Gateway",
	}
}

// LabeledServiceEntrySet represents a set of serviceEntries
// which share a common set of labels.
// These labels are used to find diffs between ServiceEntrySets.
type LabeledServiceEntrySet interface {
	// returns the set of Labels shared by this ServiceEntrySet
	Labels() map[string]string

	// returns the set of ServiceEntryes with the given labels
	Set() networking_istio_io_v1alpha3_sets.ServiceEntrySet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledServiceEntrySet struct {
	set    networking_istio_io_v1alpha3_sets.ServiceEntrySet
	labels map[string]string
}

func NewLabeledServiceEntrySet(set networking_istio_io_v1alpha3_sets.ServiceEntrySet, labels map[string]string) (LabeledServiceEntrySet, error) {
	// validate that each ServiceEntry contains the labels, else this is not a valid LabeledServiceEntrySet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on ServiceEntry %v", k, v, item.Name)
			}
		}
	}

	return &labeledServiceEntrySet{set: set, labels: labels}, nil
}

func (l *labeledServiceEntrySet) Labels() map[string]string {
	return l.labels
}

func (l *labeledServiceEntrySet) Set() networking_istio_io_v1alpha3_sets.ServiceEntrySet {
	return l.set
}

func (l labeledServiceEntrySet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list networking_istio_io_v1alpha3.ServiceEntryList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "ServiceEntry",
	}
}

// LabeledVirtualServiceSet represents a set of virtualServices
// which share a common set of labels.
// These labels are used to find diffs between VirtualServiceSets.
type LabeledVirtualServiceSet interface {
	// returns the set of Labels shared by this VirtualServiceSet
	Labels() map[string]string

	// returns the set of VirtualServicees with the given labels
	Set() networking_istio_io_v1alpha3_sets.VirtualServiceSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledVirtualServiceSet struct {
	set    networking_istio_io_v1alpha3_sets.VirtualServiceSet
	labels map[string]string
}

func NewLabeledVirtualServiceSet(set networking_istio_io_v1alpha3_sets.VirtualServiceSet, labels map[string]string) (LabeledVirtualServiceSet, error) {
	// validate that each VirtualService contains the labels, else this is not a valid LabeledVirtualServiceSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on VirtualService %v", k, v, item.Name)
			}
		}
	}

	return &labeledVirtualServiceSet{set: set, labels: labels}, nil
}

func (l *labeledVirtualServiceSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledVirtualServiceSet) Set() networking_istio_io_v1alpha3_sets.VirtualServiceSet {
	return l.set
}

func (l labeledVirtualServiceSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list networking_istio_io_v1alpha3.VirtualServiceList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "VirtualService",
	}
}

// LabeledAuthorizationPolicySet represents a set of authorizationPolicies
// which share a common set of labels.
// These labels are used to find diffs between AuthorizationPolicySets.
type LabeledAuthorizationPolicySet interface {
	// returns the set of Labels shared by this AuthorizationPolicySet
	Labels() map[string]string

	// returns the set of AuthorizationPolicyes with the given labels
	Set() security_istio_io_v1beta1_sets.AuthorizationPolicySet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledAuthorizationPolicySet struct {
	set    security_istio_io_v1beta1_sets.AuthorizationPolicySet
	labels map[string]string
}

func NewLabeledAuthorizationPolicySet(set security_istio_io_v1beta1_sets.AuthorizationPolicySet, labels map[string]string) (LabeledAuthorizationPolicySet, error) {
	// validate that each AuthorizationPolicy contains the labels, else this is not a valid LabeledAuthorizationPolicySet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on AuthorizationPolicy %v", k, v, item.Name)
			}
		}
	}

	return &labeledAuthorizationPolicySet{set: set, labels: labels}, nil
}

func (l *labeledAuthorizationPolicySet) Labels() map[string]string {
	return l.labels
}

func (l *labeledAuthorizationPolicySet) Set() security_istio_io_v1beta1_sets.AuthorizationPolicySet {
	return l.set
}

func (l labeledAuthorizationPolicySet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list security_istio_io_v1beta1.AuthorizationPolicyList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "AuthorizationPolicy",
	}
}

// LabeledSecretSet represents a set of secrets
// which share a common set of labels.
// These labels are used to find diffs between SecretSets.
type LabeledSecretSet interface {
	// returns the set of Labels shared by this SecretSet
	Labels() map[string]string

	// returns the set of Secretes with the given labels
	Set() v1_sets.SecretSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledSecretSet struct {
	set    v1_sets.SecretSet
	labels map[string]string
}

func NewLabeledSecretSet(set v1_sets.SecretSet, labels map[string]string) (LabeledSecretSet, error) {
	// validate that each Secret contains the labels, else this is not a valid LabeledSecretSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on Secret %v", k, v, item.Name)
			}
		}
	}

	return &labeledSecretSet{set: set, labels: labels}, nil
}

func (l *labeledSecretSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledSecretSet) Set() v1_sets.SecretSet {
	return l.set
}

func (l labeledSecretSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list v1.SecretList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "Secret",
	}
}

// LabeledTrafficSplitSet represents a set of trafficSplits
// which share a common set of labels.
// These labels are used to find diffs between TrafficSplitSets.
type LabeledTrafficSplitSet interface {
	// returns the set of Labels shared by this TrafficSplitSet
	Labels() map[string]string

	// returns the set of TrafficSplites with the given labels
	Set() split_smi_spec_io_v1alpha3_sets.TrafficSplitSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledTrafficSplitSet struct {
	set    split_smi_spec_io_v1alpha3_sets.TrafficSplitSet
	labels map[string]string
}

func NewLabeledTrafficSplitSet(set split_smi_spec_io_v1alpha3_sets.TrafficSplitSet, labels map[string]string) (LabeledTrafficSplitSet, error) {
	// validate that each TrafficSplit contains the labels, else this is not a valid LabeledTrafficSplitSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on TrafficSplit %v", k, v, item.Name)
			}
		}
	}

	return &labeledTrafficSplitSet{set: set, labels: labels}, nil
}

func (l *labeledTrafficSplitSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledTrafficSplitSet) Set() split_smi_spec_io_v1alpha3_sets.TrafficSplitSet {
	return l.set
}

func (l labeledTrafficSplitSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list split_smi_spec_io_v1alpha3.TrafficSplitList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "TrafficSplit",
	}
}

// LabeledTrafficTargetSet represents a set of trafficTargets
// which share a common set of labels.
// These labels are used to find diffs between TrafficTargetSets.
type LabeledTrafficTargetSet interface {
	// returns the set of Labels shared by this TrafficTargetSet
	Labels() map[string]string

	// returns the set of TrafficTargetes with the given labels
	Set() access_smi_spec_io_v1alpha2_sets.TrafficTargetSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledTrafficTargetSet struct {
	set    access_smi_spec_io_v1alpha2_sets.TrafficTargetSet
	labels map[string]string
}

func NewLabeledTrafficTargetSet(set access_smi_spec_io_v1alpha2_sets.TrafficTargetSet, labels map[string]string) (LabeledTrafficTargetSet, error) {
	// validate that each TrafficTarget contains the labels, else this is not a valid LabeledTrafficTargetSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on TrafficTarget %v", k, v, item.Name)
			}
		}
	}

	return &labeledTrafficTargetSet{set: set, labels: labels}, nil
}

func (l *labeledTrafficTargetSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledTrafficTargetSet) Set() access_smi_spec_io_v1alpha2_sets.TrafficTargetSet {
	return l.set
}

func (l labeledTrafficTargetSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list access_smi_spec_io_v1alpha2.TrafficTargetList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "TrafficTarget",
	}
}

// LabeledHTTPRouteGroupSet represents a set of hTTPRouteGroups
// which share a common set of labels.
// These labels are used to find diffs between HTTPRouteGroupSets.
type LabeledHTTPRouteGroupSet interface {
	// returns the set of Labels shared by this HTTPRouteGroupSet
	Labels() map[string]string

	// returns the set of HTTPRouteGroupes with the given labels
	Set() specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet

	// converts the set to a generic format which can be applied by the Snapshot.Apply functions
	Generic() output.ResourceList
}

type labeledHTTPRouteGroupSet struct {
	set    specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet
	labels map[string]string
}

func NewLabeledHTTPRouteGroupSet(set specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet, labels map[string]string) (LabeledHTTPRouteGroupSet, error) {
	// validate that each HTTPRouteGroup contains the labels, else this is not a valid LabeledHTTPRouteGroupSet
	for _, item := range set.List() {
		for k, v := range labels {
			// k=v must be present in the item
			if item.Labels[k] != v {
				return nil, eris.Errorf("internal error: %v=%v missing on HTTPRouteGroup %v", k, v, item.Name)
			}
		}
	}

	return &labeledHTTPRouteGroupSet{set: set, labels: labels}, nil
}

func (l *labeledHTTPRouteGroupSet) Labels() map[string]string {
	return l.labels
}

func (l *labeledHTTPRouteGroupSet) Set() specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet {
	return l.set
}

func (l labeledHTTPRouteGroupSet) Generic() output.ResourceList {
	var desiredResources []ezkube.Object
	for _, desired := range l.set.List() {
		desiredResources = append(desiredResources, desired)
	}

	// enable list func for garbage collection
	listFunc := func(ctx context.Context, cli client.Client) ([]ezkube.Object, error) {
		var list specs_smi_spec_io_v1alpha3.HTTPRouteGroupList
		if err := cli.List(ctx, &list, client.MatchingLabels(l.labels)); err != nil {
			return nil, err
		}
		var items []ezkube.Object
		for _, item := range list.Items {
			item := item // pike
			items = append(items, &item)
		}
		return items, nil
	}

	return output.ResourceList{
		Resources:    desiredResources,
		ListFunc:     listFunc,
		ResourceKind: "HTTPRouteGroup",
	}
}

type builder struct {
	ctx  context.Context
	name string

	issuedCertificates certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet

	destinationRules networking_istio_io_v1alpha3_sets.DestinationRuleSet
	envoyFilters     networking_istio_io_v1alpha3_sets.EnvoyFilterSet
	gateways         networking_istio_io_v1alpha3_sets.GatewaySet
	serviceEntries   networking_istio_io_v1alpha3_sets.ServiceEntrySet
	virtualServices  networking_istio_io_v1alpha3_sets.VirtualServiceSet

	authorizationPolicies security_istio_io_v1beta1_sets.AuthorizationPolicySet

	secrets v1_sets.SecretSet

	trafficSplits split_smi_spec_io_v1alpha3_sets.TrafficSplitSet

	trafficTargets access_smi_spec_io_v1alpha2_sets.TrafficTargetSet

	hTTPRouteGroups specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet
}

func NewBuilder(ctx context.Context, name string) *builder {
	return &builder{
		ctx:  ctx,
		name: name,

		issuedCertificates: certificates_smh_solo_io_v1alpha2_sets.NewIssuedCertificateSet(),

		destinationRules: networking_istio_io_v1alpha3_sets.NewDestinationRuleSet(),
		envoyFilters:     networking_istio_io_v1alpha3_sets.NewEnvoyFilterSet(),
		gateways:         networking_istio_io_v1alpha3_sets.NewGatewaySet(),
		serviceEntries:   networking_istio_io_v1alpha3_sets.NewServiceEntrySet(),
		virtualServices:  networking_istio_io_v1alpha3_sets.NewVirtualServiceSet(),

		authorizationPolicies: security_istio_io_v1beta1_sets.NewAuthorizationPolicySet(),

		secrets: v1_sets.NewSecretSet(),

		trafficSplits: split_smi_spec_io_v1alpha3_sets.NewTrafficSplitSet(),

		trafficTargets: access_smi_spec_io_v1alpha2_sets.NewTrafficTargetSet(),

		hTTPRouteGroups: specs_smi_spec_io_v1alpha3_sets.NewHTTPRouteGroupSet(),
	}
}

// the output Builder uses a builder pattern to allow
// iteratively collecting outputs before producing a final snapshot
type Builder interface {

	// add IssuedCertificates to the collected outputs
	AddIssuedCertificates(issuedCertificates ...*certificates_smh_solo_io_v1alpha2.IssuedCertificate)

	// get the collected IssuedCertificates
	GetIssuedCertificates() certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet

	// add DestinationRules to the collected outputs
	AddDestinationRules(destinationRules ...*networking_istio_io_v1alpha3.DestinationRule)

	// get the collected DestinationRules
	GetDestinationRules() networking_istio_io_v1alpha3_sets.DestinationRuleSet

	// add EnvoyFilters to the collected outputs
	AddEnvoyFilters(envoyFilters ...*networking_istio_io_v1alpha3.EnvoyFilter)

	// get the collected EnvoyFilters
	GetEnvoyFilters() networking_istio_io_v1alpha3_sets.EnvoyFilterSet

	// add Gateways to the collected outputs
	AddGateways(gateways ...*networking_istio_io_v1alpha3.Gateway)

	// get the collected Gateways
	GetGateways() networking_istio_io_v1alpha3_sets.GatewaySet

	// add ServiceEntries to the collected outputs
	AddServiceEntries(serviceEntries ...*networking_istio_io_v1alpha3.ServiceEntry)

	// get the collected ServiceEntries
	GetServiceEntries() networking_istio_io_v1alpha3_sets.ServiceEntrySet

	// add VirtualServices to the collected outputs
	AddVirtualServices(virtualServices ...*networking_istio_io_v1alpha3.VirtualService)

	// get the collected VirtualServices
	GetVirtualServices() networking_istio_io_v1alpha3_sets.VirtualServiceSet

	// add AuthorizationPolicies to the collected outputs
	AddAuthorizationPolicies(authorizationPolicies ...*security_istio_io_v1beta1.AuthorizationPolicy)

	// get the collected AuthorizationPolicies
	GetAuthorizationPolicies() security_istio_io_v1beta1_sets.AuthorizationPolicySet

	// add Secrets to the collected outputs
	AddSecrets(secrets ...*v1.Secret)

	// get the collected Secrets
	GetSecrets() v1_sets.SecretSet

	// add TrafficSplits to the collected outputs
	AddTrafficSplits(trafficSplits ...*split_smi_spec_io_v1alpha3.TrafficSplit)

	// get the collected TrafficSplits
	GetTrafficSplits() split_smi_spec_io_v1alpha3_sets.TrafficSplitSet

	// add TrafficTargets to the collected outputs
	AddTrafficTargets(trafficTargets ...*access_smi_spec_io_v1alpha2.TrafficTarget)

	// get the collected TrafficTargets
	GetTrafficTargets() access_smi_spec_io_v1alpha2_sets.TrafficTargetSet

	// add HTTPRouteGroups to the collected outputs
	AddHTTPRouteGroups(hTTPRouteGroups ...*specs_smi_spec_io_v1alpha3.HTTPRouteGroup)

	// get the collected HTTPRouteGroups
	GetHTTPRouteGroups() specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet

	// build the collected outputs into a label-partitioned snapshot
	BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error)

	// build the collected outputs into a snapshot with a single partition
	BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error)
}

func (b *builder) AddIssuedCertificates(issuedCertificates ...*certificates_smh_solo_io_v1alpha2.IssuedCertificate) {
	for _, obj := range issuedCertificates {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output IssuedCertificate %v", sets.Key(obj))
		b.issuedCertificates.Insert(obj)
	}
}
func (b *builder) AddDestinationRules(destinationRules ...*networking_istio_io_v1alpha3.DestinationRule) {
	for _, obj := range destinationRules {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output DestinationRule %v", sets.Key(obj))
		b.destinationRules.Insert(obj)
	}
}
func (b *builder) AddEnvoyFilters(envoyFilters ...*networking_istio_io_v1alpha3.EnvoyFilter) {
	for _, obj := range envoyFilters {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output EnvoyFilter %v", sets.Key(obj))
		b.envoyFilters.Insert(obj)
	}
}
func (b *builder) AddGateways(gateways ...*networking_istio_io_v1alpha3.Gateway) {
	for _, obj := range gateways {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output Gateway %v", sets.Key(obj))
		b.gateways.Insert(obj)
	}
}
func (b *builder) AddServiceEntries(serviceEntries ...*networking_istio_io_v1alpha3.ServiceEntry) {
	for _, obj := range serviceEntries {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output ServiceEntry %v", sets.Key(obj))
		b.serviceEntries.Insert(obj)
	}
}
func (b *builder) AddVirtualServices(virtualServices ...*networking_istio_io_v1alpha3.VirtualService) {
	for _, obj := range virtualServices {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output VirtualService %v", sets.Key(obj))
		b.virtualServices.Insert(obj)
	}
}
func (b *builder) AddAuthorizationPolicies(authorizationPolicies ...*security_istio_io_v1beta1.AuthorizationPolicy) {
	for _, obj := range authorizationPolicies {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output AuthorizationPolicy %v", sets.Key(obj))
		b.authorizationPolicies.Insert(obj)
	}
}
func (b *builder) AddSecrets(secrets ...*v1.Secret) {
	for _, obj := range secrets {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output Secret %v", sets.Key(obj))
		b.secrets.Insert(obj)
	}
}
func (b *builder) AddTrafficSplits(trafficSplits ...*split_smi_spec_io_v1alpha3.TrafficSplit) {
	for _, obj := range trafficSplits {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output TrafficSplit %v", sets.Key(obj))
		b.trafficSplits.Insert(obj)
	}
}
func (b *builder) AddTrafficTargets(trafficTargets ...*access_smi_spec_io_v1alpha2.TrafficTarget) {
	for _, obj := range trafficTargets {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output TrafficTarget %v", sets.Key(obj))
		b.trafficTargets.Insert(obj)
	}
}
func (b *builder) AddHTTPRouteGroups(hTTPRouteGroups ...*specs_smi_spec_io_v1alpha3.HTTPRouteGroup) {
	for _, obj := range hTTPRouteGroups {
		if obj == nil {
			continue
		}
		contextutils.LoggerFrom(b.ctx).Debugf("added output HTTPRouteGroup %v", sets.Key(obj))
		b.hTTPRouteGroups.Insert(obj)
	}
}

func (b *builder) GetIssuedCertificates() certificates_smh_solo_io_v1alpha2_sets.IssuedCertificateSet {
	return b.issuedCertificates
}

func (b *builder) GetDestinationRules() networking_istio_io_v1alpha3_sets.DestinationRuleSet {
	return b.destinationRules
}
func (b *builder) GetEnvoyFilters() networking_istio_io_v1alpha3_sets.EnvoyFilterSet {
	return b.envoyFilters
}
func (b *builder) GetGateways() networking_istio_io_v1alpha3_sets.GatewaySet {
	return b.gateways
}
func (b *builder) GetServiceEntries() networking_istio_io_v1alpha3_sets.ServiceEntrySet {
	return b.serviceEntries
}
func (b *builder) GetVirtualServices() networking_istio_io_v1alpha3_sets.VirtualServiceSet {
	return b.virtualServices
}

func (b *builder) GetAuthorizationPolicies() security_istio_io_v1beta1_sets.AuthorizationPolicySet {
	return b.authorizationPolicies
}

func (b *builder) GetSecrets() v1_sets.SecretSet {
	return b.secrets
}

func (b *builder) GetTrafficSplits() split_smi_spec_io_v1alpha3_sets.TrafficSplitSet {
	return b.trafficSplits
}

func (b *builder) GetTrafficTargets() access_smi_spec_io_v1alpha2_sets.TrafficTargetSet {
	return b.trafficTargets
}

func (b *builder) GetHTTPRouteGroups() specs_smi_spec_io_v1alpha3_sets.HTTPRouteGroupSet {
	return b.hTTPRouteGroups
}

func (b *builder) BuildLabelPartitionedSnapshot(labelKey string) (Snapshot, error) {
	return NewLabelPartitionedSnapshot(
		b.name,
		labelKey,

		b.issuedCertificates,

		b.destinationRules,
		b.envoyFilters,
		b.gateways,
		b.serviceEntries,
		b.virtualServices,

		b.authorizationPolicies,

		b.secrets,

		b.trafficSplits,

		b.trafficTargets,

		b.hTTPRouteGroups,
	)
}

func (b *builder) BuildSinglePartitionedSnapshot(snapshotLabels map[string]string) (Snapshot, error) {
	return NewSinglePartitionedSnapshot(
		b.name,
		snapshotLabels,

		b.issuedCertificates,

		b.destinationRules,
		b.envoyFilters,
		b.gateways,
		b.serviceEntries,
		b.virtualServices,

		b.authorizationPolicies,

		b.secrets,

		b.trafficSplits,

		b.trafficTargets,

		b.hTTPRouteGroups,
	)
}
